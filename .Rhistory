hist(myMean, prob = TRUE, col="grey", main = "App Normal")
lines(seq(min(myMean), max(myMean), length.out = 500), dnorm(seq(min(myMean), max(myMean), length.out = 500), mean = sampleMean, sd = sqrt(sampleVariance)))
yfit <- dnorm(xfit, mean=sampleMean, sd=sqrt(sampleVariance))
yfit <- dnorm(xfit, mean=1/myLambda, sd=(1/myLambda/sqrt(n)))
lines(xfit, yfit, pch=22, col="red", lty=1)
0.2/40
hist(myMean, prob = TRUE, col="grey", main = "App Normal")
lines(seq(min(myMean), max(myMean), length.out = 500), dnorm(seq(min(myMean), max(myMean), length.out = 500), mean = sampleMean, sd = sqrt(sampleVariance)/sqrt(n)))
lines(density(myMean, adjust = 2), lwd=2, col = "blue")
hist(myMean, prob = TRUE, col="grey", main = "App Normal")
lines(density(myMean, adjust = 2), lwd=2, col = "blue")
x <- seq(min(myMean), max(myMean), length = n)
y <- dnorm(x, mean = sampleMean, sd = sqrt(sampleVariance)/sqrt(n))
lines(x, y, lwd = 2, col = "red")
hist(myMean, prob = TRUE, col="grey", main = "App Normal")
lines(density(myMean, adjust = 2), lwd=2, col = "blue")
x <- seq(min(myMean), max(myMean), length = n)
y <- dnorm(x, mean = sampleMean, sd = sqrt(sampleVariance)/sqrt(n))
lines(x, y, lwd = 2, col = "red")
hist(myMean, prob = TRUE, col="grey", main = "App Normal")
lines(density(myMean, adjust = 2), lwd=2, col = "blue")
x <- seq(min(myMean), max(myMean), length = n)
y <- dnorm(x, mean = sampleMean, sd = sqrt(sampleVariance)/sqrt(n))
lines(x, y, lwd = 2, col = "red")
legend("topright", legend = c("Density distribution","Normal distribution"), col = c("blue", "red"), pch = 19)
hist(myMean, prob = TRUE, col="grey", main = "App Normal")
lines(density(myMean, adjust = 2), lwd=2, col = "blue")
x <- seq(min(myMean), max(myMean), length = n)
y <- dnorm(x, mean = sampleMean, sd = sqrt(sampleVariance)/sqrt(n))
lines(x, y, lwd = 2, col = "red")
legend("topright", legend = c("Density distribution","Normal distribution"), col = c("blue", "red"), lty=c(1,1))
hist(runif(1000))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
hist(myMean, prob = TRUE, breaks = 80, col="grey", main = "App Normal")
lines(density(myMean, adjust = 2), lwd=2, col = "blue")
x <- seq(min(myMean), max(myMean), length = n)
y <- dnorm(x, mean = sampleMean, sd = sqrt(sampleVariance)/sqrt(n))
lines(x, y, lwd = 2, col = "red")
legend("topright", legend = c("Density distribution","Normal distribution"), col = c("blue", "red"), lty=c(1,1))
hist(myMean, prob = TRUE, breaks = 80, col="grey", main = "App Normal")
lines(density(myMean, adjust = 2), lwd=2, col = "blue")
x <- seq(min(myMean), max(myMean), length = n)
y <- dnorm(x, mean = sampleMean, sd = sqrt(sampleVariance)/sqrt(n))
lines(x, y, lwd = 2, col = "red")
legend("topright", legend = c("Density distribution","Normal distribution"), col = c("blue", "red"), lty=c(1,1))
temp <- (myMean - 5) / (0.2 / sqrt(n))
dty <- density(temp)
plot(dty$x, dty$y, xlab = "", ylab = "density", type = "n", xlim = c(-3, 3), ylim = c(0, .5))
hist(dty)
temp <- (myMean - 5) / (1/0.2 / sqrt(n))
dty <- density(temp)
hist(dty)
plot(dty$x, dty$y, xlab = "", ylab = "density", type = "n", xlim = c(-3, 3), ylim = c(0, .5))
plot(dty$x, dty$y, xlab = "", ylab = "density", type = "n")
plot(dty$x, dty$y)
dty$x
dty
plot(density(temp))
hist(temp)
plot(density(temp))
temp <- (myMean - sampleMean) / (sampleVariance / sqrt(n))
myStdSamp <- (myMean - sampleMean) / (sampleVariance / sqrt(n))
hist(myStdSamp, prob = TRUE, breaks = 80, col="grey", main = "App Normal")
lines(density(myMean, adjust = 2), lwd=2, col = "blue")
x <- seq(min(myMean), max(myMean), length = n)
y <- dnorm(x, mean = sampleMean, sd = sqrt(sampleVariance)/sqrt(n))
lines(x, y, lwd = 2, col = "red")
legend("topright", legend = c("Density distribution","Normal distribution"), col = c("blue", "red"), lty=c(1,1))
myStdSamp <- (myMean - sampleMean) / (sampleVariance / sqrt(n))
hist(myStdSamp, prob = TRUE, breaks = 80, col="grey", main = "App Normal")
lines(density(myMean, adjust = 2), lwd=2, col = "blue")
x <- seq(min(myMean), max(myMean), length = n)
y <- dnorm(x, mean = sampleMean, sd = sqrt(sampleVariance)/sqrt(n))
lines(x, y, lwd = 2, col = "red")
legend("topright", legend = c("Density distribution","Normal distribution"), col = c("blue", "red"), lty=c(1,1))
myStdSamp <- (myMean - sampleMean) / (sampleVariance / sqrt(n))
hist(myStdSamp, prob = TRUE, breaks = 80, col="grey", main = "App Normal")
lines(density(myStdSamp, adjust = 2), lwd=2, col = "blue")
x <- seq(min(myMean), max(myMean), length = n)
y <- dnorm(x, mean = sampleMean, sd = sqrt(sampleVariance)/sqrt(n))
lines(x, y, lwd = 2, col = "red")
legend("topright", legend = c("Density distribution","Normal distribution"), col = c("blue", "red"), lty=c(1,1))
myStdSamp <- (myMean - sampleMean) / (sampleVariance / sqrt(n))
hist(myStdSamp, prob = TRUE, breaks = 20, col="grey", main = "App Normal")
lines(density(myStdSamp, adjust = 2), lwd=2, col = "blue")
x <- seq(min(myMean), max(myMean), length = n)
y <- dnorm(x, mean = sampleMean, sd = sqrt(sampleVariance)/sqrt(n))
lines(x, y, lwd = 2, col = "red")
legend("topright", legend = c("Density distribution","Normal distribution"), col = c("blue", "red"), lty=c(1,1))
myStdSamp <- (myMean - sampleMean) / (sampleVariance / sqrt(n))
hist(myStdSamp, prob = TRUE, breaks = 50, col="grey", main = "App Normal")
lines(density(myStdSamp, adjust = 2), lwd=2, col = "blue")
x <- seq(min(myMean), max(myMean), length = n)
y <- dnorm(x, mean = sampleMean, sd = sqrt(sampleVariance)/sqrt(n))
lines(x, y, lwd = 2, col = "red")
legend("topright", legend = c("Density distribution","Normal distribution"), col = c("blue", "red"), lty=c(1,1))
myStdSamp <- (myMean - sampleMean) / (sampleVariance / sqrt(n))
hist(myStdSamp, prob = TRUE, breaks = 50, col="grey", main = "App Normal")
lines(density(myStdSamp, adjust = 2), lwd=2, col = "blue")
x <- seq(min(myStdSamp), max(myStdSamp), length = n)
y <- dnorm(x)
lines(x, y, lwd = 2, col = "red")
legend("topright", legend = c("Density distribution","Normal distribution"), col = c("blue", "red"), lty=c(1,1))
myStdSamp <- (myMean - sampleMean) / (sampleVariance / sqrt(n))
hist(myStdSamp, prob = TRUE, breaks = 50, col="grey", main = "App Normal")
lines(density(myStdSamp, adjust = 2), lwd=2, col = "blue")
x <- seq(min(myStdSamp), max(myStdSamp), length = n)
y <- dnorm(x, mean = 0, sd = 1/sqrt(n))
lines(x, y, lwd = 2, col = "red")
legend("topright", legend = c("Density distribution","Normal distribution"), col = c("blue", "red"), lty=c(1,1))
myStdSamp <- (myMean - sampleMean) / (sampleVariance / sqrt(n))
hist(myStdSamp, prob = TRUE, breaks = 50, col="grey", main = "App Normal")
lines(density(myStdSamp, adjust = 2), lwd=2, col = "blue")
x <- seq(min(myStdSamp), max(myStdSamp), length = n)
y <- dnorm(x, mean = 0, sd = 1/sqrt(n))
lines(seq(-3, 3, length = 100), dnorm(seq(-3, 3, length = 100)), col = grey(.8), lwd = 3)
legend("topright", legend = c("Density distribution","Normal distribution"), col = c("blue", "red"), lty=c(1,1))
par(mfrow = c(1, 3))
for (n in c(1, 2, 6)){
temp <- matrix(sample(1 : 6, n * 10000, replace = TRUE), ncol = n)
temp <- apply(temp, 1, mean)
temp <- (temp - 3.5) / (1.71 / sqrt(n))
dty <- density(temp)
plot(dty$x, dty$y, xlab = "", ylab = "density", type = "n", xlim = c(-3, 3), ylim = c(0, .5))
title(paste("sample mean of", n, "obs"))
lines(seq(-3, 3, length = 100), dnorm(seq(-3, 3, length = 100)), col = grey(.8), lwd = 3)
lines(dty$x, dty$y, lwd = 2)
}
par(mfrow = c(1, 1))
plot(dty$x, dty$y, xlab = "", ylab = "density", type = "n", xlim = c(-3, 3), ylim = c(0, .5))
myStdSamp <- (myMean - sampleMean) / sqrt(sampleVariance / n)
hist(myStdSamp, prob = TRUE, breaks = 50, col="grey", main = "App Normal")
lines(density(myStdSamp, adjust = 2), lwd=2, col = "blue")
x <- seq(min(myStdSamp), max(myStdSamp), length = n)
y <- dnorm(x, mean = 0, sd = 1/sqrt(n))
lines(seq(-3, 3, length = 100), dnorm(seq(-3, 3, length = 100)), col = grey(.8), lwd = 3)
legend("topright", legend = c("Density distribution","Normal distribution"), col = c("blue", "red"), lty=c(1,1))
myStdSamp <- (myMean - sampleMean) / sqrt(sampleVariance / n)
hist(myStdSamp, prob = TRUE, breaks = 50, col="grey", main = "App Normal")
lines(density(myStdSamp, adjust = 2), lwd=2, col = "blue")
x <- seq(min(myStdSamp), max(myStdSamp), length = n)
y <- dnorm(x, mean = 0, sd = 1/sqrt(n))
lines(seq(-3, 3, length = 100), dnorm(seq(-3, 3, length = 100)), col = grey(.8), lwd = 3)
legend("topright", legend = c("Density distribution","Normal distribution"), col = c("blue", "red"), lty=c(1,1))
myStdSamp <- (myMean - sampleMean) / sqrt(sampleVariance / n)
hist(myStdSamp, prob = TRUE, breaks = 50, col="grey", main = "App Normal")
lines(density(myStdSamp, adjust = 2), lwd=2, col = "blue")
x <- seq(min(myStdSamp), max(myStdSamp), length = n)
y <- dnorm(x, mean = 0, sd = 1/sqrt(n))
lines(seq(-1, 1, length = 100), dnorm(seq(-1, 1, length = 100)), col = grey(.8), lwd = 3)
legend("topright", legend = c("Density distribution","Normal distribution"), col = c("blue", "red"), lty=c(1,1))
myStdSamp <- (myMean - sampleMean) / sqrt(sampleVariance / n)
hist(myStdSamp, prob = TRUE, breaks = 50, col="grey", main = "App Normal")
lines(density(myStdSamp, adjust = 2), lwd=2, col = "blue")
x <- seq(min(myStdSamp), max(myStdSamp), length = n)
y <- dnorm(x, mean = 0, sd = 1/sqrt(n))
lines(seq(-1, 1, length = 100), dnorm(seq(-1, 1, length = 100)), col = grey(.8), lwd = 3)
legend("topright", legend = c("Density distribution","Normal distribution"), col = c("blue", "red"), lty=c(1,1))
myStdSamp <- (myMean - 5) / (1/0.2 / sqrt(n))
hist(myStdSamp, prob = TRUE, breaks = 50, col="grey", main = "App Normal")
lines(density(myStdSamp, adjust = 2), lwd=2, col = "blue")
x <- seq(min(myStdSamp), max(myStdSamp), length = n)
y <- dnorm(x, mean = 0, sd = 1/sqrt(n))
lines(seq(-1, 1, length = 100), dnorm(seq(-1, 1, length = 100)), col = grey(.8), lwd = 3)
legend("topright", legend = c("Density distribution","Normal distribution"), col = c("blue", "red"), lty=c(1,1))
myStdSamp <- (myMean - 5) / (1/0.2 / sqrt(n))
hist(myStdSamp, prob = TRUE, breaks = 50, col="grey", main = "App Normal")
lines(density(myStdSamp, adjust = 2), lwd=2, col = "blue")
x <- seq(min(myStdSamp), max(myStdSamp), length = n)
y <- dnorm(x, mean = 0, sd = 1/sqrt(n))
lines(seq(-1, 1, length = 100), dnorm(seq(-1, 1, length = 100)), col = grey(.8), lwd = 3)
legend("topright", legend = c("Density distribution","Normal distribution"), col = c("blue", "red"), lty=c(1,1))
temp <- matrix(sample(1 : 6, n * 10000, replace = TRUE), ncol = n)
temp <- apply(temp, 1, mean)
temp <- (temp - 3.5) / (1.71 / sqrt(n))
dty <- density(temp)
plot(dty$x, dty$y, xlab = "", ylab = "density", type = "n", xlim = c(-3, 3), ylim = c(0, .5))
lines(seq(-3, 3, length = 100), dnorm(seq(-3, 3, length = 100)), col = grey(.8), lwd = 3)
hist(myMean, prob = TRUE, breaks = 80, col="grey", main = "App Normal")
lines(density(myMean, adjust = 2), lwd=2, col = "blue")
x <- seq(min(myMean), max(myMean), length = n)
y <- dnorm(x, mean = sampleMean, sd = sqrt(sampleVariance)/sqrt(n))
lines(x, y, lwd = 2, col = "red")
legend("topright", legend = c("Density distribution","Normal distribution"), col = c("blue", "red"), lty=c(1,1))
hist(myMean, prob = TRUE, breaks = 80, col="grey", main = "App Normal")
lines(density(myMean, adjust = 2), lwd=2, col = "blue")
x <- seq(min(myMean), max(myMean), length = n)
y <- dnorm(x, mean = sampleMean, sd = sqrt(sampleVariance)/sqrt(n))
lines(x, y, lwd = 2, col = "red")
legend("topright", legend = c("Density distribution","Normal distribution"), col = c("blue", "red"), lty=c(1,1))
hist(myMean, prob = TRUE, breaks = 80, col="grey", main = "App Normal")
lines(density(myMean, adjust = 2), lwd=2, col = "blue")
x <- seq(min(myMean), max(myMean), length = n)
y <- dnorm(x, mean = sampleMean, sd = sqrt(sampleVariance)/sqrt(n))
lines(x, y, lwd = 2, col = "red")
legend("topright", legend = c("Density distribution","Normal distribution"), col = c("blue", "red"), lty=c(1,1))
myStdSamp <- (myMean - 5) / (1/0.2 / sqrt(n))
hist(myStdSamp, prob = TRUE, breaks = 50, col="grey", main = "App Normal")
lines(density(myStdSamp, adjust = 2), lwd=2, col = "blue")
lines(seq(-1, 1, length = 100), dnorm(seq(-1, 1, length = 100)), col = grey(.8), lwd = 3)
legend("topright", legend = c("Density distribution","Normal distribution"), col = c("blue", "red"), lty=c(1,1))
myStdSamp <- (myMean - 5) / (1/0.2 / sqrt(n))
hist(myStdSamp, prob = TRUE, breaks = 50, col = "grey", main = "App Normal", xlim = c(-3, 3))
lines(density(myStdSamp, adjust = 2), lwd = 2, col = "blue")
lines(seq(-3, 3, length = 100), dnorm(seq(-3, 3, length = 100)), col = "red", lwd = 2)
legend("topright", legend = c("Simulated Density Distribution","Standard Normal Distribution"), col = c("blue", "red"), lty=c(1,1))
n<-40
# Applying the CLT
myStdSamp <- (myMean - theoMean) / (1/myLambda / sqrt(n))
# Applying the CLT
myStdSamp <- (myMean - theoMean) / (1/myLambda / sqrt(n))
theoMean <- 1/myLambda
# Applying the CLT
myStdSamp <- (myMean - theoMean) / (1/myLambda / sqrt(n))
# Plot the the histogram of the means and add his density function.
hist(myStdSamp, prob = TRUE, breaks = 50, col = "grey",
main = "Mean Distribution vs Standard Normal Distribution", xlim = c(-3, 3))
lines(density(myStdSamp, adjust = 2), lwd = 2, col = "blue")
# And now add the density function of a standard normal distribution
lines(seq(-3, 3, length = 100), dnorm(seq(-3, 3, length = 100)), col = "red", lwd = 2)
legend("topright", legend = c("Simulated Density Distribution","Standard Normal Distribution"), col = c("blue", "red"), lty=c(1,1))
means <- cumsum(myMean)/(1:n)
plot(x = 1:nsim, y = means, type = "l")
tail(means)
means <- cumsum(myMean)/(1:nsim)
plot(x = 1:nsim, y = means, type = "l")
?abline
# Perform the mean for every simulation
myMean <- apply(mySim, 1, mean)
# Plot the histogram of the mean and add two lines, one for the sample mean, one for the theoretical mean
means <- cumsum(myMean)/(1:nsim)
plot(x = 1:nsim, y = means, type = "l", main = "Sample mean vs Theoretical mean")
abline(a = 1/myLambda, col = "red", lw = 2)
?abline
# Perform the mean for every simulation
myMean <- apply(mySim, 1, mean)
# Plot the histogram of the mean and add two lines, one for the sample mean, one for the theoretical mean
means <- cumsum(myMean)/(1:nsim)
plot(x = 1:nsim, y = means, type = "l", main = "Sample mean vs Theoretical mean")
abline(h = 1/myLambda, col = "red", lw = 2)
legend("topright", legend = c("Sample mean","Theoretical mean"), col = c("black", "red"), lty=c(1,1))
# Perform the mean for every simulation
myMean <- apply(mySim, 1, mean)
# Plot the histogram of the mean and add two lines, one for the sample mean, one for the theoretical mean
means <- cumsum(myMean)/(1:nsim)
plot(x = 1:nsim, y = means, type = "l", main = "Sample mean vs Theoretical mean")
abline(h = 1/myLambda, col = "red")
legend("topright", legend = c("Sample mean","Theoretical mean"), col = c("black", "red"), lty=c(1,1))
# Perform the mean for every simulation
myMean <- apply(mySim, 1, mean)
# Plot the histogram of the mean and add two lines, one for the sample mean, one for the theoretical mean
means <- cumsum(myMean)/(1:nsim)
plot(x = 1:nsim, y = means, type = "l", main = "Sample mean vs Theoretical mean")
abline(h = 1/myLambda, col = "red")
legend("topright", legend = c("Sample mean","Theoretical mean"), col = c("black", "red"), lty=c(1,1))
set.seed(108)
# Perform the mean for every simulation
myMean <- apply(mySim, 1, mean)
# Plot the histogram of the mean and add two lines, one for the sample mean, one for the theoretical mean
means <- cumsum(myMean)/(1:nsim)
plot(x = 1:nsim, y = means, type = "l", main = "Sample mean vs Theoretical mean")
abline(h = 1/myLambda, col = "red")
legend("topright", legend = c("Sample mean","Theoretical mean"), col = c("black", "red"), lty=c(1,1))
# Perform the mean for every simulation
myMean <- apply(mySim, 1, mean)
# Plot the histogram of the mean and add two lines, one for the sample mean, one for the theoretical mean
means <- cumsum(myMean)/(1:nsim)
plot(x = 1:nsim, y = means, type = "l", main = "Sample mean vs Theoretical mean")
abline(h = 1/myLambda, col = "red")
legend("topright", legend = c("Sample mean","Theoretical mean"), col = c("black", "red"), lty=c(1,1))
tail(means)
# Perform the mean for every simulation
myMean <- apply(mySim, 1, mean)
# Plot the histogram of the mean and add two lines, one for the sample mean, one for the theoretical mean
means <- cumsum(myMean)/(1:nsim)
plot(x = 1:nsim, y = means, type = "l",
main = "Sample mean vs Theoretical mean", xlab = "Number of Simulation", ylab = "Mean")
abline(h = 1/myLambda, col = "red")
legend("bottomright", legend = c("Sample mean","Theoretical mean"), col = c("black", "red"), lty=c(1,1))
set.seed(1088)
# Perform the mean for every simulation
myMean <- apply(mySim, 1, mean)
# Plot the histogram of the mean and add two lines, one for the sample mean, one for the theoretical mean
means <- cumsum(myMean)/(1:nsim)
plot(x = 1:nsim, y = means, type = "l",
main = "Sample mean vs Theoretical mean", xlab = "Number of Simulation", ylab = "Mean")
abline(h = 1/myLambda, col = "red")
legend("bottomright", legend = c("Sample mean","Theoretical mean"), col = c("black", "red"), lty=c(1,1))
mean(myMean)
tail(means)
lm(mpg ~ cyl + wt, data = mtcars)
39.686 - 1.508 * 4 - 3.191
39.686 - 1.508 * 8 - 3.191
24.431-30.463
lm(mpg ~ cyl, data = mtcars)
summary(lm(mpg ~ cyl + wt, data = mtcars))
summary(lm(mpg ~ cyl * wt, data = mtcars))
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
hatvalues(fit)
dfbetas(fit)
round(dfbetas(fit)[1 : 10, 2], 3)
round(dfbetas(fit)[1 : 5, 2], 3)
round(hatvalues(fit)[1 : 5], 3)
fit <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
summary(fit)$coef
install.packages("devtools")
devtools::install_github("jhudsl/collegeIncome")
library(collegeIncome)
data(college)
devtools::install_github("jhudsl/matahari")
library(matahari)
dance_start(value = FALSE, contents = FALSE)
View(college)
plot(x = college$major, y = college$p75th)
plot(x = factor(college$major), y = college$p75th)
dance_save("~/Desktop/college_major_analysis.rds")
dance_save("C:/Users/letic/Desktop/college_major_analysis.rds")
readRDS("C:/Users/letic/Desktop/college_major_analysis.rds")
data(mtcars)
?mtcars
boxplot(with(mtcars, am == 1, am == 0))
boxplot(with(mtcars, mtcars[am == 1], mtcars[am == 0]))
mtcars[am == 1]
boxplot(with(mtcars, mtcars[mtcars$am == 1], mtcars[mtcars$am == 0]))
mtcars[mtcars$am == 1]
mtcars[mtcars$am]
head(mtcars)
mtcars[mtcars$am == 1]
mtcars[, mtcars$am == 1]
mtcars[which(am == 1)]
mtcars[which(mtcars, am == 1)]
mtcars[mtcars$am == 1, ]
boxplot(with(mtcars, mtcars[am == 1, ], mtcars[am == 0, ]))
boxplot(with(mtcars$mpg, mtcars[am == 1, ], mtcars[am == 0, ]))
library(ggplot2)
g <- ggplot(mtcars, aes(x = am, y = mpg)) + geom_boxplot()
g
g <- ggplot(mtcars, aes(x = am, y = mpg)) + geom_boxplot(fill = am)
g <- ggplot(mtcars, aes(x = am, y = mpg)) + geom_boxplot(fill = mtcars$am)
g
g <- ggplot(mtcars, aes(x = am, y = mpg, group = am)) + geom_boxplot()
g
g <- ggplot(mtcars, aes(x = am, y = mpg, group = am)) + geom_boxplot(fill = am)
g <- ggplot(mtcars, aes(x = am, y = mpg, group = am)) + geom_boxplot(color = am)
g <- ggplot(mtcars, aes(x = am, y = mpg, group = am)) + geom_boxplot(colour = am)
g <- ggplot(mtcars, aes(x = am, y = mpg, group = am)) + geom_boxplot(colour = mtcars$am)
g
g <- ggplot(mtcars, aes(x = am, y = mpg, color = am)) + geom_boxplot()
g
g <- ggplot(mtcars, aes(x = am, y = mpg, filled = am)) + geom_boxplot()
g
g <- ggplot(mtcars, aes(x = am, y = mpg, fill = am)) + geom_boxplot()
g
class(mtcars$am)
g <- ggplot(mtcars, aes(x = as.factor(am), y = mpg, fill = am)) + geom_boxplot()
g
class(ToothGrowth$supp)
g <- ggplot(mtcars, aes(x = am, y = mpg, fill = am, group = am)) + geom_boxplot()
g
g <- ggplot(mtcars, aes(x = am, y = mpg, group = am)) + geom_boxplot()
g
g <- ggplot(mtcars, aes(x = am, y = mpg, group = am, color = am)) + geom_boxplot()
g
class(am)
class(mt$carsam)
class(mtcars$am)
g <- ggplot(mtcars, aes(x = am, y = mpg, group = am, color = as.numeric(am)) + geom_boxplot()
class(ToothGrowth$dose)
g <- ggplot(ToothGrowth, aes(x = dose, y = len, fill = dose))
g + geom_boxplot()
g <- ggplot(mtcars, aes(x = am, y = mpg)) + geom_boxplot()
g
ggplot(mtcars,aes(x=cyl,y=mpg)) + geom_boxplot()
g <- ggplot(mtcars, aes(x = am, y = mpg, fill = am)) + geom_boxplot()
g
g <- ggplot(mtcars, aes(x = am, y = mpg, fill = am, group = am)) + geom_boxplot()
g
g <- ggplot(mtcars, aes(x = am, y = mpg, group = am)) + geom_boxplot()
g
?labels
g <- ggplot(mtcars, aes(x = labels(am, c("a", "b")), y = mpg, group = am)) + geom_boxplot()
g
g <- ggplot(mtcars, aes(x = as.factor(am, labels(c("a", "b"))), y = mpg, group = am)) + geom_boxplot()
g
g <- ggplot(mtcars, aes(x = as.factor(am, labels(am, c("a", "b"))), y = mpg, group = am)) + geom_boxplot()
g
as.factor(am, labels(am, c("a", "b")))
factor(am, labels(am, c("a", "b")))
g <- ggplot(mtcars, aes(x = factor(am, labels(am, c("a", "b"))), y = mpg, group = am)) + geom_boxplot()
g
as.factor(mtcars$am)
?as.factor
?factor
as.factor(mtcars$am, labels = c("a", "b"))
factor(mtcars$am, labels = c("a", "b"))
?mtcars
factor(mtcars$am, labels = c("Manual", "Automatic"))
factor(mtcars$am, labels = c("Automatic", "Manual"))
class(mtcars$am)
g <- ggplot(mtcars, aes(x = factor(mtcars$am, labels = c("Automatic", "Manual")), y = mpg)) + geom_boxplot()
g
g <- ggplot(mtcars, aes(x = factor(mtcars$am, labels = c("Automatic", "Manual")), y = mpg, fill = am)) + geom_boxplot()
g
g <- ggplot(mtcars, aes(x = factor(mtcars$am, labels = c("Automatic", "Manual")), y = mpg, fill = factor(mtcars$am, labels = c("Automatic", "Manual")))) + geom_boxplot()
g
mtcars$am <- factor(mtcars$am, labels = c("Automatic", "Manual"))
g <- ggplot(mtcars, aes(x = am, y = mpg, fill = am)) + geom_boxplot()
g
lm(mtcars$mpg ~ mtcars$am)
t.test(mtcars$mpg ~ mtcars$am)
summary(lm(mtcars$mpg ~ mtcars$am))
g <- ggplot(mtcars, aes(x = am, y = mpg, fill = am))
g + geom_boxplot(xlab = "Transmission Type", ylab = "MPG")
?mtcars
g <- ggplot(mtcars, aes(x = am, y = mpg, fill = am))
g + geom_boxplot() + xlab("Transmission Type") + ylab("Miles/(US) gallon")
g <- ggplot(mtcars, aes(x = am, y = mpg, fill = am))
g + geom_boxplot() + xlab("Transmission Type") + ylab("Miles/(US) gallon") + ggtitle("mpg - am relationship")
plot(mtcars$mpg, mtcars$am)
help_console(mtcars)
help(mtcars)
print(mtcars)
print(?mtcars)
print(?mtcars$format)
t.test(mtcars$mpg, mtcars$am, paired = F, var.equal = F, alternative = "two.sided", conf.level = 0.95)
data(mtcars)
t.test(mtcars$mpg, mtcars$am, paired = F, var.equal = F, alternative = "two.sided", conf.level = 0.95)
mtcarsA <- subset(mtcars, am %in% 0)
mtcarsM <- subset(mtcars, am %in% 1)
t.test(mtcarsA$mpg, mtcarsM$am, paired = F, var.equal = F, alternative = "two.sided", conf.level = 0.95)
mtcarsA <- subset(mtcars, am %in% 0)
mtcarsM <- subset(mtcars, am %in% 1)
t.test(mtcarsA$mpg, mtcarsM$mpg, paired = F, var.equal = F, alternative = "two.sided", conf.level = 0.95)
ggplot(dat1, aes(x=mpg, y=am)) + geom_point() +
stat_smooth(method="glm", family="binomial", se=FALSE)
ggplot(mtcars, aes(x=mpg, y=am)) + geom_point() +
stat_smooth(method="glm", family="binomial", se=FALSE)
ggplot(mtcars, aes(x=mpg, y=am)) + geom_point()
ggplot(mtcars, aes(x=mpg, y=am)) + geom_point() + stat_smooth(method="glm", family="binomial", se=FALSE)
ggplot(mtcars, aes(x=mpg, y=am)) + geom_point() + smooth(method="glm", family="binomial", se=FALSE)
ggplot(mtcars, aes(x=mpg, y=am)) + geom_point() + geom_smooth(method = "glm",
method.args = list(family = "binomial"),
se = FALSE)
glm(mpg ~ am, data=dat1, family=binomial)
glm(mpg ~ am, data=mtcars, family=binomial)
glm(am ~ mpg, data = mtcars, family = binomial)
glm(mpg ~ as.factor(am) + as.factor(cyl) + hp + wt, data = mtcars)
glm(mpg ~ as.factor(am) + as.factor(cyl), data = mtcars)
glm(mpg ~ as.factor(am), data = mtcars)
lm(mpg ~ as.factor(am), data = mtcars)
ggplot(mtcars, aes(x=mpg, y=am)) + geom_point() + geom_smooth(method = "glm"
)
ggplot(mtcars, aes(x=am, y=mpg)) + geom_point() + geom_smooth(method = "glm"
)
ggplot(mtcars, aes(x=am, y=mpg)) + geom_point() + geom_smooth(method = "glm", method.args = list(family = "binomial"), se = FALSE
)
ggplot(mtcars, aes(x=am, y=mpg)) + geom_point() + geom_smooth(method = "glm")
library(slidify)
setwd("C:/Git/Gabri_Website/slides")
slidify("index.Rmd")
setwd("C:/Git/Gabri_Website")
rmarkdown::render_site()
setwd("C:/Git/Gabri_Website")
rmarkdown::render_site()
setwd("C:/Git/Gabri_Website")
rmarkdown::render_site()
setwd("C:/Git/Gabri_Website")
rmarkdown::render_site()
setwd("C:/Git/Gabri_Website")
rmarkdown::render_site()
setwd("C:/Git/Gabri_Website")
rmarkdown::render_site()
warning()
warnings()
setwd("C:/Git/Gabri_Website")
rmarkdown::render_site()
setwd("C:/Git/Gabri_Website")
rmarkdown::render_site()
setwd("C:/Git/Gabri_Website")
rmarkdown::render_site()
setwd("C:/Git/Gabri_Website")
rmarkdown::render_site()
setwd("C:/Git/Gabri_Website")
rmarkdown::render_site()
setwd("C:/Git/Gabri_Website")
rmarkdown::render_site()
setwd("C:/Git/Gabri_Website")
rmarkdown::render_site()
setwd("C:/Git/Gabri_Website")
rmarkdown::render_site()
setwd("C:/Git/Gabri_Website")
rmarkdown::render_site()
setwd("C:/Git/Gabri_Website")
rmarkdown::render_site()
setwd("C:/Git/Gabri_Website")
rmarkdown::render_site()
setwd("C:/Git/Gabri_Website")
rmarkdown::render_site()
setwd("C:/Git/Gabri_Website")
rmarkdown::render_site()
setwd("C:/Git/Gabri_Website")
rmarkdown::render_site()
setwd("C:/Git/Gabri_Website")
rmarkdown::render_site()
setwd("C:/Git/Gabri_Website")
rmarkdown::render_site()
setwd("C:/Git/Gabri_Website")
rmarkdown::render_site()
